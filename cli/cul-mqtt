#!/usr/bin/env python
import argparse
import logging
from culmqtt.culmqtt import CULMQTT


def prepare_parser(parser):
    parser.add_argument(
        "-d",
        "--device",
        type=str,
        default="/dev/ttyUSB0",
        help="Port to of the CUL device",
    )
    parser.add_argument(
        "-b",
        "--broker",
        type=str,
        default="localhost",
        help="IP address of the MQTT broker",
    )
    parser.add_argument(
        "-t",
        "--topic",
        type=str,
        default="cul",
        help="MQTT topic for this CULT device",
    )
    parser.add_argument(
        "-c", "--clientid", type=str, default="cul", help="MQTT client ID"
    )
    parser.add_argument(
        "-u",
        "--username",
        type=str,
        default=None,
        help="MQTT broker user name (optional)",
    )
    parser.add_argument(
        "-p",
        "--password",
        type=str,
        default=None,
        help="MQTT broker password name (optional)",
    )
    parser.add_argument(
        "-D",
        "--delayms",
        type=int,
        default=500,
        help="Delay after sending a message via CUL",
    )
    parser.add_argument(
        "-v",
        "--verbose",
        action="count",
        dest="verbose",
        default=0,
        help="Verbose or extra verbose (2x) logging",
    )


def run_program(parser):
    config = vars(parser.parse_args())
    # prepare logging
    log_level = logging.ERROR
    if config["verbose"] and config["verbose"] == 1:
        log_level = logging.INFO
    elif config["verbose"] and config["verbose"] >= 2:
        log_level = logging.DEBUG
    logging.basicConfig()
    logger = logging.getLogger("cul-mqtt")
    logger.setLevel(log_level)
    # run
    c = CULMQTT(
        config["device"],
        config["broker"],
        mqtt_client_id=config["clientid"],
        mqtt_topic=config["topic"],
        username=config["username"],
        password=config["password"],
        delay_send=config["delayms"] / 1000.0,
        log_level=log_level,
    )
    c.start()


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="CUL to MQTT bridge.")
    prepare_parser(parser)
    run_program(parser)
